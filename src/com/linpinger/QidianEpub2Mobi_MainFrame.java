/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.linpinger;

import com.linpinger.tool.FileDrop;
import com.linpinger.tool.FoxEpubReader;
import com.linpinger.tool.FoxEpubWriter;
import java.awt.Color;
import java.io.File;
import java.util.HashMap;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;

/**
 *
 * @author fox
 */
public class QidianEpub2Mobi_MainFrame extends javax.swing.JFrame {

    String SrcPath = "/dev/shm/1234567890.epub" ;  // 文件路径
    final String myBodyFontStyle="\t\t@font-face { font-family: \"hei\"; src: local(\"Zfull-GB\"); }\n\t\t.content { font-family: \"hei\"; }\n";
    String BodyFontStyle= myBodyFontStyle;
    boolean isNameHaveCNName = true ;
    DefaultListModel mList = new DefaultListModel();
    
    /**
     * Creates new form QidianEpub2Mobi_MainFrame
     */
    public QidianEpub2Mobi_MainFrame() {
        initComponents();

        // http://iharder.sourceforge.net/current/java/filedrop/
        new FileDrop(this, new FileDrop.Listener() {  // 拖动到窗口上就可以处理
            public void filesDropped(java.io.File[] files) {
                // handle file drop
                for (int i = 0; i < files.length; i++) {
                    System.out.println("- Drag & Drop: " + files[i].getPath());
                    SrcPath = files[i].getPath();
                }
                jSrcPath.setText(SrcPath);
                showEpubInfo();
            }   // end filesDropped
        }); // end FileDrop.Listener

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList = new javax.swing.JList();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jSrcPath = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem2 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem3 = new javax.swing.JCheckBoxMenuItem();
        msg = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Qidian Epub 2 Mobi Ver: 2017-12-25");
        setAlwaysOnTop(true);
        setFont(new java.awt.Font("文泉驿微米黑", 0, 14)); // NOI18N
        setLocationByPlatform(true);

        jList.setFont(new java.awt.Font("文泉驿微米黑", 0, 14)); // NOI18N
        jList.setModel(mList);
        jList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        jList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jList);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "选择要转换的文件(拖文件到窗口上也行)：", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("文泉驿微米黑", 0, 12), new java.awt.Color(197, 123, 1))); // NOI18N

        jButton1.setFont(new java.awt.Font("文泉驿微米黑", 0, 14)); // NOI18N
        jButton1.setMnemonic('o');
        jButton1.setText("选择(O)");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jSrcPath.setFont(new java.awt.Font("文泉驿微米黑", 0, 14)); // NOI18N
        jSrcPath.setText(SrcPath);
        jSrcPath.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jSrcPathKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSrcPath, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSrcPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jButton1)
        );

        jButton2.setFont(new java.awt.Font("文泉驿微米黑", 0, 14)); // NOI18N
        jButton2.setMnemonic('s');
        jButton2.setText("生成(S)");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jMenu1.setMnemonic('c');
        jMenu1.setText("设置(C)");
        jMenu1.setFont(new java.awt.Font("文泉驿微米黑", 0, 14)); // NOI18N

        jCheckBoxMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.ALT_MASK));
        jCheckBoxMenuItem1.setFont(new java.awt.Font("文泉驿微米黑", 0, 14)); // NOI18N
        jCheckBoxMenuItem1.setMnemonic('t');
        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("窗口置顶(T)");
        jCheckBoxMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jCheckBoxMenuItem1);

        jCheckBoxMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.ALT_MASK));
        jCheckBoxMenuItem2.setFont(new java.awt.Font("文泉驿微米黑", 0, 14)); // NOI18N
        jCheckBoxMenuItem2.setMnemonic('f');
        jCheckBoxMenuItem2.setSelected(true);
        jCheckBoxMenuItem2.setText("使用字体Zfull-GB");
        jCheckBoxMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jCheckBoxMenuItem2);

        jCheckBoxMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.ALT_MASK));
        jCheckBoxMenuItem3.setFont(new java.awt.Font("文泉驿微米黑", 0, 14)); // NOI18N
        jCheckBoxMenuItem3.setMnemonic('n');
        jCheckBoxMenuItem3.setSelected(true);
        jCheckBoxMenuItem3.setText("文件名为 123_书名(N)");
        jCheckBoxMenuItem3.setToolTipText("");
        jCheckBoxMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jCheckBoxMenuItem3);

        jMenuBar1.add(jMenu1);

        msg.setForeground(new java.awt.Color(0, 162, 255));
        msg.setText("今天天气不错啊");
        msg.setEnabled(false);
        msg.setFont(new java.awt.Font("文泉驿微米黑", 0, 14)); // NOI18N
        jMenuBar1.add(msg);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 299, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int returnVal = jFileChooser1.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            SrcPath = jFileChooser1.getSelectedFile().getAbsolutePath() ;
            jSrcPath.setText(SrcPath);
            showEpubInfo();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jSrcPathKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jSrcPathKeyPressed
        if ( java.awt.event.KeyEvent.VK_ENTER ==  evt.getKeyCode() ) { // 回车
            showEpubInfo();
        }
    }//GEN-LAST:event_jSrcPathKeyPressed

    private void jListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListMouseClicked
        if ( 2 == evt.getClickCount() ) {
            int index = jList.locationToIndex(evt.getPoint());
            System.out.println("click: " + index);
            toMobi(index);
        }
    }//GEN-LAST:event_jListMouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        toMobi(0);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jCheckBoxMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem1ActionPerformed
        if (this.isAlwaysOnTop()) {
            this.setAlwaysOnTop(false);
            msg.setText("窗口不置顶");
            System.out.println("- 窗口不置顶");
        } else {
            this.setAlwaysOnTop(true);
            msg.setText("窗口置顶");
            System.out.println("- 窗口置顶");
        }
    }//GEN-LAST:event_jCheckBoxMenuItem1ActionPerformed

    private void jCheckBoxMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem2ActionPerformed
        if (jCheckBoxMenuItem2.isSelected()) {
            BodyFontStyle = myBodyFontStyle;
            msg.setText("使用字体");
            System.out.println("- Font: myFont");
        } else {
            BodyFontStyle = "";
            msg.setText("不使用字体");
            System.out.println("- Font: 空");
        }
    }//GEN-LAST:event_jCheckBoxMenuItem2ActionPerformed

    private void jCheckBoxMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem3ActionPerformed
        if ( isNameHaveCNName ) {
            isNameHaveCNName = false;
            msg.setText("文件名形式为: 1234567890.mobi ");
            System.out.println("- saveName: 111.mobi");
        } else {
            isNameHaveCNName = true;
            msg.setText("文件名形式为: 1234567890_书名.mobi ");
            System.out.println("- saveName: 111_哈哈.mobi");
        }
    }//GEN-LAST:event_jCheckBoxMenuItem3ActionPerformed

    void showEpubInfo() {  // 按选择按钮后，显示信息，依赖变量 SrcPath
        File epubFile = new File(SrcPath);
        if (!epubFile.exists()) {
            msg.setText("错误: 文件不存在: " + epubFile.getPath());
            return;
        }
        if (!epubFile.getName().toLowerCase().endsWith(".epub")) {
            msg.setText("错误: 文件名不是以.epub结尾: " + epubFile.getName());
            return;
        }
        FoxEpubReader epubReader = new FoxEpubReader(epubFile);
        HashMap<String, Object> infoMap = epubReader.getQiDianEpubInfo();
        String qidianID = infoMap.get("qidianid").toString();
        String bookName = infoMap.get("bookname").toString();
        String bookAuthor = infoMap.get("author").toString();

        msg.setText(epubFile.getName() + " : " + bookName + " - " + bookAuthor + " - " + qidianID);
        
        mList.setSize(0); // 清空

        for (HashMap<String, Object> hm : epubReader.getQiDianEpubTOC()) {
            mList.addElement( hm.get("title").toString() );
        }
    }

    void toMobi(int clickIDX) {  // idx base 0
        File epubFile = new File(SrcPath);
        if ( ! epubFile.exists() ) {
            msg.setText("错误: 文件不存在: " + epubFile.getPath() );
            return ;
        }
        FoxEpubReader epubReader = new FoxEpubReader(epubFile);
        HashMap<String, Object> infoMap = epubReader.getQiDianEpubInfo();
        String qidianID = infoMap.get("qidianid").toString();
        String bookName = infoMap.get("bookname").toString();
        String bookAuthor = infoMap.get("author").toString();
        
        String outFileName = qidianID + "_" + bookName + ".mobi";
        if ( ! isNameHaveCNName ) {
            outFileName = qidianID + ".mobi";
        }
        File newFile = new File(epubFile.getParentFile(), outFileName);
        System.out.println("- start to mobi: " + newFile.getPath());
 //       msg.setText("- 开始转换: " + newFile.getPath());
        long sTime = System.currentTimeMillis();

        FoxEpubWriter newEpub = new FoxEpubWriter(newFile, bookName);
        newEpub.BookCreator = bookAuthor;
        newEpub.BodyFontStyle = BodyFontStyle;

        String html = "";
        int ii = -1 ;
        for (HashMap<String, Object> hm : epubReader.getQiDianEpubTOC()) {
            ++ ii ;
            if ( ii <  clickIDX ) {
                continue ;
            }
            html = "　　" + epubReader.getQiDianEpubPage(hm.get("name").toString()).replace("\n", "<br />\n　　");
            newEpub.addChapter(hm.get("title").toString(), html);
        }

        newEpub.saveAll();
        System.out.println("- done to mobi: " + newFile.getPath());
        msg.setText("★生成完毕: " + newFile.getName() + "，耗时(ms): " + (System.currentTimeMillis() - sTime)); // 　
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
         if (0 == args.length) {
            System.out.println("Usage: java -jar this.jar qidian.epub\n");
        }
        if (1 == args.length) {

            String srcPath = args[0];
            File epubFile = new File(srcPath);
            System.out.println("- qidian epub: " + srcPath);

            FoxEpubReader epubReader = new FoxEpubReader(epubFile);
            HashMap<String, Object> infoMap = epubReader.getQiDianEpubInfo();
            String qidianID = infoMap.get("qidianid").toString();
            String bookName = infoMap.get("bookname").toString();
            String bookAuthor = infoMap.get("author").toString();

//        System.out.println("type=" + infoMap.get("type"));
//        System.out.println("info=" + infoMap.get("info"));
            System.out.println("- qidianid: " + qidianID);
            System.out.println("- bookname: " + bookName);
            System.out.println("- bookauthor: " + bookAuthor);

            File newFile = new File(epubFile.getParentFile(), qidianID + "_" + bookName + ".mobi");
            System.out.println("- start to mobi: " + newFile.getPath());

            FoxEpubWriter newEpub = new FoxEpubWriter(newFile, bookName);
            newEpub.BookCreator = bookAuthor;

            String html = "";
            for (HashMap<String, Object> hm : epubReader.getQiDianEpubTOC()) {
                html = "　　" + epubReader.getQiDianEpubPage(hm.get("name").toString()).replace("\n", "<br />\n　　");
                newEpub.addChapter(hm.get("title").toString(), html);
            }

            newEpub.saveAll();
            System.out.println("- done to mobi: " + newFile.getPath());
            return ;
        }
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        javax.swing.UIManager.put("control", new Color(228, 242, 228));               // 控件背景色
        javax.swing.UIManager.put("nimbusLightBackground", new Color(228, 242, 228)); // 文本背景色
        javax.swing.UIManager.put("nimbusSelectionBackground", new Color(129, 193, 115));          // 选定文本 129, 193, 115    55, 165, 55    64, 128, 128 

        javax.swing.UIManager.put("nimbusBlueGrey", new Color(179, 219, 179));        //控件色
        javax.swing.UIManager.put("nimbusBase", new Color(70, 140, 60));              //滚动条，基础颜色

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(QidianEpub2Mobi_MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(QidianEpub2Mobi_MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(QidianEpub2Mobi_MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(QidianEpub2Mobi_MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new QidianEpub2Mobi_MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem2;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem3;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JList<String> jList;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jSrcPath;
    private javax.swing.JMenu msg;
    // End of variables declaration//GEN-END:variables
}
